# Import relevant libraries
import numpy as np
import sys, random
import matplotlib.pyplot as plt
from matplotlib import rc
rc('text', usetex=True)
from astropy.table import Table

##### DESCRIPTION ##############################################################

""" This method reads in the data generated by ISING.py and plots the relevant
    graphs, and saves them into the Plots folder. """

##### MAIN METHOD ##############################################################

if __name__=="__main__":

    # Check correct inputs
    if len(sys.argv) != 2:
        print(f'Incorrect Usage. \nCorrect Usage: {sys.argv[0]} <G/K>')
        quit()

    # Check method input is correct
    if sys.argv[1].upper() == 'G':
        Method = 'Glauber'
    elif sys.argv[1].upper() == 'K':
        Method = 'Kawasaki'
    else:
        print('Invalid method input. Input "G" for Glauber or "K" for Kawasaki.')
        quit()

    # Read in Energy Data
    EnergyData = Table.read(f'Data/EnergyData_{Method}.dat', format='ascii')
    T = EnergyData['T']
    E = EnergyData['E']
    E_Err = EnergyData['E_Err']
    SHC = EnergyData['SHC']
    SHC_Err = EnergyData['SHC_Err']

    # Determine estimate for critical temperature from the maximum SHC
    CritTemp = T[np.argmax(SHC)]
    print(f'Critical Temperature determined from Energy: {CritTemp.round(2)}')

    # Plot Energy Data
    plt.figure(figsize=(8,8))
    plt.title(f'Mean Energy vs. Temperature: {Method} Dynamics')
    plt.xlim(T[0], T[-1])
    plt.errorbar(T, E, yerr=E_Err, fmt='.', capsize=5, lw=.5, c='red', label='Error')
    plt.plot(T,E, lw=.5, color='blue', label='Mean Energy')
    plt.axvline(CritTemp, color='green', lw=.5, alpha=0.5, label='$T_{C} =$ %.2f' % CritTemp)
    plt.xlabel('Temperature [T]')
    plt.ylabel('Mean Energy [E]')
    plt.legend(loc='upper left')
    plt.savefig(f'Plots/{Method}_MeanEnergy.png')

    # Plot SHC Data
    plt.figure(figsize=(8,8))
    plt.title(f'Specific Heat Capacity vs. Temperature: {Method} Dynamics')
    plt.xlim(T[0], T[-1])
    plt.errorbar(T, SHC, yerr=SHC_Err, fmt='.', capsize=5, lw=.5, c='red', label='Error')
    plt.axvline(CritTemp, color='green', lw=.5, alpha=0.5, label='$T_{C} =$ %.2f' % CritTemp)
    plt.plot(T,SHC, lw=.5, color='blue', label='Specific Heat Capacity')
    plt.legend(loc='upper left')
    plt.xlabel('Temperature [T]')
    plt.ylabel('Specific Heat Capacity [c]')
    plt.savefig(f'Plots/{Method}_SHC.png')

    if Method != 'Kawasaki':

        # Read in Energy Data
        MagData = Table.read(f'Data/MagData_Glauber.dat', format='ascii')
        T = MagData['T']
        M = MagData['M']
        M_Err = MagData['M_Err']
        X = MagData['X']
        X_Err = MagData['X_Err']

        # Determine estimate for critical temperature from the maximum Susceptibility
        CritTemp = T[np.argmax(X)]
        print(f'Critical Temperature determined from Magnetisation: {CritTemp.round(2)}')

        # Plot Energy Data
        plt.figure(figsize=(8,8))
        plt.title(f'Mean Magnetisation vs. Temperature: Glauber Dynamics')
        plt.xlim(T[0], T[-1])
        plt.errorbar(T, M, yerr=M_Err, fmt='.', capsize=5, lw=.5, c='red', label='Error')
        plt.axvline(CritTemp, color='green', lw=.5, alpha=0.5, label='$T_{C} =$ %.2f' % CritTemp)
        plt.plot(T,M, lw=.5, color='blue', label='Mean Magnetisation')
        plt.legend(loc='upper right')
        plt.xlabel('Temperature [T]')
        plt.ylabel('Mean Magnetisation [|M|]')
        plt.savefig(f'Plots/Glauber_MeanMagnetisation.png')

        # Plot SHC Data
        plt.figure(figsize=(8,8))
        plt.title(f'Susceptibility vs. Temperature: Glauber Dynamics')
        plt.xlim(T[0], T[-1])
        plt.errorbar(T, X, yerr=X_Err, fmt='.', capsize=5, lw=.5, c='red', label='Error')
        plt.axvline(CritTemp, color='green', lw=.5, alpha=0.5, label='$T_{C} =$ %.2f' % CritTemp)
        plt.plot(T,X, lw=.5, color='blue', label='Susceptibility')
        plt.legend(loc='upper left')
        plt.xlabel('Temperature [T]')
        plt.ylabel('Susceptibility [$\chi$]')
        plt.savefig(f'Plots/Glauber_Susceptibility.png')
