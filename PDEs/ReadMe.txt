Checkpoint 3: Read Me Document

Please find in the following a description and explanation of my submission for this checkpoint. Both parts use classes stored in Lattice.py

 -----> Part 1: Cahn-Hilliard

USAGE: CahnHilliard.py <Lattice Size> <Phi0> <StepNumber / Interval> <Animate(Y/M)>

Some user error handling has been implemented to ensure correct inputs. The inputs are as follows:
- Recommended inputs are lattice size of 50/100, Phi0 of 0, +- 0.5 and step numbers of 1e6 or intervals of ~0.01.
- Picking a lattice size of N will generate an NxN lattice of cells. These will initially be assigned normally distributed random noise about a
  noise parameter which is taken to be 0.1, about the given value of Phi0.
- Inputting "Y" will cause the lattice to be animated and output to the user. Inputting "N" will skip this step.

Some values have been hard-coded.
- All noise and constants have been hardcoded to be 0.1 (M, a, k)
- dx, dt are fixed at 1.
- The simulation can be instructed to record the Phi plane at varied steps. To change this, go into Lattice.py and edit self.Record to True.
- Free Energy values are recorded at 10 step intervals, so as not to produce an overload of data.
Whilst these values are hard-coded, they are simple to change, allowing the code to be very flexible at modelling various dynamics.

Running CahnHilliard.py will offer two runtypes:
- The first (1) will run the simulation, collecting data for free energy, producing a corresponding data file and graph.
  Both of these can be found under Data (or Plots) / Cahn-Hilliard, separated by either PhiZero or PhiHalf. If saving images, these can be found
  under SavedPlots / PhiZero or PhiHalf.
- The second runmode is a parameter test for dx and dt at a user-provided interval. It produces a resulting data file, and the relevant plot can
  be generated by running PlotCHParams.py in the PlottingFunctions folder. Example plots can be found under Plots / Cahn-Hilliard / Parameters.

  -----> Part 2: Boundary Value Problems

 USAGE: Poisson.py <Lattice Size> <Phi-0> <Mode> <Field (E/B)> <Animate (Y/N)>

 Some user error handling has been implemented to ensure correct inputs. The inputs are as follows:
 - Recommended inputs are lattice size of 50/100, Phi0 of 0.5.
 - Three modes are allowed: J (Jacobi), GS (GaussSeidel), SOR.
 - Two fields are permitted: E (Electric) or B (Magnetic)
 - Picking a lattice size of N will generate an NxN lattice of cells. These will initially be assigned normally distributed random noise about a
   noise parameter which is taken to be 0.1, about the given value of Phi0. Additionally, the user will be prompted to provide charge or
   wire coordinates.
 - Inputting "Y" will cause the lattice to be animated and output to the user. Inputting "N" will skip this step.

 Some values have been hard-coded.
 - dx, dt are fixed at 1.
 - A convergence limit is set at 1e-3
 - The plane for recording field and potential is assumed to be at the k coordinate.
 Whilst these values are hard-coded, they are simple to change, allowing the code to be very flexible at modelling various dynamics.

The individual run-types can be used as follows:
- J   : Runs a Jacobi mechanism for given input coordinates.
- GS  : Runs a Gauss-Seidel algorithm (splitting the lattice into two sublattices and sequentially updating) for given input coordinates.
- SOR : There are two run types here:
        1: A single Omega run, which is user provided.
        2: A convergence run, testing the 1-2 Omega range for a given omega interval.

For each method, the corresponding data for single runs can be found under Data/Method/FieldType/N{GridSize}-Slice.txt and the relevant plots can be found
under Plots/Method/FieldType/PlotType

The plot types correspond to:
- Field: A representation of the field about the center of the lattice in 1D.
- FieldFit: A fit to determine the exponent of r for the field as a function of r.
- PotentialFit: A fit to determine the exponent of r for the potential as a function of r (in ln Phi for E, Az for B)
- PotentialPlot: A plot of the plane of potential at convergence.
- VectorPlot: A vector plot of the field at convergence.
All plots assume centrally located charge or wire, though this could easily be changed.

The convergence data can be found under Data/SOR/FieldType/ConvergenceData, with two types. _ corresponds to a more zoomed in look at 1.9-2.0 range,
where the omega minimum is expected. The corresponding plots can be found under Plots/SOR/Convergence, along with fit minima. Grid50 corresponds to 50^3, the
rest correspond to 100^3.
